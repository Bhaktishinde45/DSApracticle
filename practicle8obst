#include <iostream>
#include <string>
#include<queue>
using namespace std;
class OBST {
    public:
        int n, p, q;
        int pi[10], qi[10]; 
        string name[10];
        int W[10][10], C[10][10], R[10][10]; 
        void read() {
            cout << "enter a number of id:- ";
            cin >> n;

            for (int i = 1; i <= n; i++) {
                cout << "enter id: ";
                cin >> name[i];
            }
            cout << endl;
            for (int i = 1; i <= n; i++) {
                cout << "Enter probability of successful search: ";
                cin >> p;
                pi[i] = p;
            }
            cout << endl;
            for (int i = 0; i <= n; i++) {
                cout << "Enter probability of unsuccessful search: ";
                cin >> q;
                qi[i] = q;
            }
        }
        void display() {
            cout << "Keys: ";
            for (int i = 1; i <= n; i++) {
                cout << name[i] << " ";
            }
            cout << "\nProbability of successful search: ";
            for (int i = 1; i <= n; i++) {
                cout << pi[i] << " ";
            }
            cout << "\nProbability of unsuccessful search: ";
            for (int i = 0; i <= n; i++) {
                cout << qi[i] << " ";
            }
        }
        void createOBST()
		{
            cout << "\nWeight       Cost       Root\n";
            for (int i = 0; i <= n; i++) {
                W[i][i] = qi[i];
                C[i][i] = R[i][i] = 0;
                cout << W[i][i] << "  " << C[i][i] << "  " << R[i][i] << endl;
            }
            for (int i = 0; i < n; i++) {
                int j = i + 1;
                W[i][j] = qi[i] + qi[j] + pi[j-1];
                C[i][j] = W[i][j];
                R[i][j] = j;
                cout << W[i][j] << "  " << C[i][j] << "  " << R[i][j] << endl;
            }
            for (int m = 2; m <= n; m++) {
                for (int i = 0; i <= n - m; i++) {
                    int j = i + m;
                    W[i][j] = W[i][j - 1] + pi[j] + qi[j];
                    int k = findOBST(i, j);
                    R[i][j] = k;
                    C[i][j] = W[i][j] + C[i][k - 1] + C[k][j];
                    cout << W[i][j] << "  " << C[i][j] << "  " << R[i][j] << endl;
                }
            }
          cout<<"optimal cost:"<<C[0][n];  
        }
		int findOBST(int i, int j)
		{
            int min_cost = 200, best_root;
            for (int m = i + 1; m <= j; m++) {
                int temp_cost = C[i][m - 1] + C[m][j];
                if (temp_cost < min_cost) {
                    min_cost = temp_cost;
                    best_root = m;
                }
            }
            return best_root;
        }
	    void show() 
		{
	    cout << "\nOBST Structure:\n";
	    cout << "Root\tLeft Child\tRight Child\n";
	    queue<int> q1;
	    q1.push(0);
	    q1.push(n);
	
	    while (!q1.empty()) {
	        int i = q1.front(); q1.pop();
	        int j = q1.front(); q1.pop();
			int k = R[i][j];
	        string root = name[k];
	
	        
	        string left ;
			{
				if(R[i][k-1]==0)
				{
					left="NULL";
					
				}
				else
				{
					left=name[R[i][k-1]];
				}
			}
	        string right;
			{
				if(R[k][j]==0)
				{
					right="NULL";
				}
				else
				{
					right=name[R[k][j]];
				}
			}
	        cout << root << "\t" << left << "\t\t" << right << endl;
	
	        if (R[i][k - 1] != 0)
			{
	            q1.push(i);
	            q1.push(k - 1);
	        }
	
	        if (R[k][j] != 0)
			{
	            q1.push(k);
	            q1.push(j);
	        }
	    }
}		
};
int main() {
    OBST obst;
    obst.read();
    obst.display();
    obst.createOBST();
    obst.show();
    return 0;
}


         
