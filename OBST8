#include <iostream> 
#include <queue> 
#include <string> 
#define m 50 
using namespace std; 
class obst { 
public: 
    string arr[m]; 
    int p[m]; 
    int q[m]; 
    int w[m][m], c[m][m], r[m][m]; 
    int n, j, minCost, s = 0, k; 
    void get() { 
        cout << "\nEnter the number of keys: "; 
        cin >> n; 
 
        for (int i = 1; i <= n; i++) { 
            cout << "Enter key " << i << ": "; 
            cin >> arr[i]; 
        } 
        cout << "Enter successful probabilities:\n"; 
        for (int i = 1; i <= n; i++) { 
            cin >> p[i]; 
        } 
        cout << "Enter unsuccessful probabilities:\n"; 
        for (int i = 0; i <= n; i++) { 
            cin >> q[i]; 
        } 
    } 
    void tabel() { 
        for (int i = 0; i <= n; i++) { 
            w[i][i] = q[i]; 
            c[i][i] = r[i][i] = 0; 
        } 
        for (int i = 0; i < n; i++) { 
            w[i][i + 1] = q[i + 1] + p[i + 1] + w[i][i]; 
            c[i][i + 1] = w[i][i + 1]; 
            r[i][i + 1] = i + 1; 
        } 
        for (int d = 2; d <= n; d++) { 
            for (int i = 0; i + d <= n; i++) { 
                j = i + d; 
                w[i][j] = q[j] + p[j] + w[i][j - 1]; 
                minCost = 999999; 
                for (k = i + 1; k <= j; k++) { 
                    int cost = w[i][j] + c[i][k - 1] + c[k][j]; 
                    if (minCost > cost) { 
                        s = k; 
                        minCost = cost; 
                    } 
                } 
                c[i][j] = minCost; 
                r[i][j] = s; 
            }}} 
    void displayt() { 
        for (int d = 0; d <= n; d++) { 
            cout << "\n\nFor difference " << d; 
            cout << "\nStarting vertex\t\tWeight\t\tCost\t\tRoot"; 
            for (int i = 0; i + d <= n; i++) { 
                j = i + d; 
                cout << "\n\t" << i << "\t\t" << w[i][j] << "\t\t" << c[i][j] << "\t\t" << r[i][j]; 
        }}    } 
    void show() { 
        cout << "\nKeys: "; 
        for (int i = 1; i <= n; i++) { 
            cout << arr[i] << " "; 
        } 
        cout << "\nSuccessful probabilities: "; 
        for (int i = 1; i <= n; i++) { 
            cout << p[i] << " "; 
        } 
        cout << "\nUnsuccessful probabilities: "; 
        for (int i = 0; i <= n; i++) { 
            cout << q[i] << " "; 
        } 
        cout << endl; } 
    void tree() { 
        queue<int> q; 
        q.push(0); 
        q.push(n); 
        cout << "\n\nTree Structure:"; 
        cout << "\nRoot\t\tLeft\t\tRight\n"; 
 
        while (!q.empty()) { 
            int i = q.front(); q.pop(); 
            int j = q.front(); q.pop(); 
            if (r[i][j] == 0) continue; 
          int rootIndex = r[i][j]; 
            cout << arr[rootIndex]; 
            if (r[i][rootIndex - 1] == 0) { 
                cout << "\t\tNULL"; 
            } else { 
                q.push(i); 
                q.push(rootIndex - 1); 
                cout << "\t\t" << arr[r[i][rootIndex - 1]]; 
            }  
            if (r[rootIndex][j] == 0) { 
                cout << "\t\tNULL"; 
            } else { 
                q.push(rootIndex); 
                q.push(j); 
                cout << "\t\t" << arr[r[rootIndex][j]]; 
            } 
            cout << endl; 
        } }}; 
int main() { 
    obst ob; 
    ob.get(); 
    ob.show(); 
    ob.tabel(); 
    ob.displayt(); 
    ob.tree(); 
    return 0; 
} 
 
 
